// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schedule_message.proto

#ifndef PROTOBUF_schedule_5fmessage_2eproto__INCLUDED
#define PROTOBUF_schedule_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_schedule_5fmessage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsAgentScheduleMessageImpl();
void InitDefaultsAgentScheduleMessage();
inline void InitDefaults() {
  InitDefaultsAgentScheduleMessage();
}
}  // namespace protobuf_schedule_5fmessage_2eproto
namespace cti {
namespace common {
class AgentScheduleMessage;
class AgentScheduleMessageDefaultTypeInternal;
extern AgentScheduleMessageDefaultTypeInternal _AgentScheduleMessage_default_instance_;
}  // namespace common
}  // namespace cti
namespace cti {
namespace common {

enum AgentScheduleMessage_AgentStatus {
  AgentScheduleMessage_AgentStatus_STOP = 0,
  AgentScheduleMessage_AgentStatus_MOVE = 1
};
bool AgentScheduleMessage_AgentStatus_IsValid(int value);
const AgentScheduleMessage_AgentStatus AgentScheduleMessage_AgentStatus_AgentStatus_MIN = AgentScheduleMessage_AgentStatus_STOP;
const AgentScheduleMessage_AgentStatus AgentScheduleMessage_AgentStatus_AgentStatus_MAX = AgentScheduleMessage_AgentStatus_MOVE;
const int AgentScheduleMessage_AgentStatus_AgentStatus_ARRAYSIZE = AgentScheduleMessage_AgentStatus_AgentStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* AgentScheduleMessage_AgentStatus_descriptor();
inline const ::std::string& AgentScheduleMessage_AgentStatus_Name(AgentScheduleMessage_AgentStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    AgentScheduleMessage_AgentStatus_descriptor(), value);
}
inline bool AgentScheduleMessage_AgentStatus_Parse(
    const ::std::string& name, AgentScheduleMessage_AgentStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AgentScheduleMessage_AgentStatus>(
    AgentScheduleMessage_AgentStatus_descriptor(), name, value);
}
enum AgentScheduleMessage_NavigationState {
  AgentScheduleMessage_NavigationState_STOPPED = 0,
  AgentScheduleMessage_NavigationState_MOVING = 1,
  AgentScheduleMessage_NavigationState_LIFTING = 2,
  AgentScheduleMessage_NavigationState_DOCKING = 3,
  AgentScheduleMessage_NavigationState_UNSTOPABLE = 4,
  AgentScheduleMessage_NavigationState_WAITING = 5,
  AgentScheduleMessage_NavigationState_PAUSE = 6,
  AgentScheduleMessage_NavigationState_OCCUPY_LIFT = 7,
  AgentScheduleMessage_NavigationState_ERROR = 8,
  AgentScheduleMessage_NavigationState_DOCKING_BLOCKED = 9,
  AgentScheduleMessage_NavigationState_CHARGING = 10
};
bool AgentScheduleMessage_NavigationState_IsValid(int value);
const AgentScheduleMessage_NavigationState AgentScheduleMessage_NavigationState_NavigationState_MIN = AgentScheduleMessage_NavigationState_STOPPED;
const AgentScheduleMessage_NavigationState AgentScheduleMessage_NavigationState_NavigationState_MAX = AgentScheduleMessage_NavigationState_CHARGING;
const int AgentScheduleMessage_NavigationState_NavigationState_ARRAYSIZE = AgentScheduleMessage_NavigationState_NavigationState_MAX + 1;

const ::google::protobuf::EnumDescriptor* AgentScheduleMessage_NavigationState_descriptor();
inline const ::std::string& AgentScheduleMessage_NavigationState_Name(AgentScheduleMessage_NavigationState value) {
  return ::google::protobuf::internal::NameOfEnum(
    AgentScheduleMessage_NavigationState_descriptor(), value);
}
inline bool AgentScheduleMessage_NavigationState_Parse(
    const ::std::string& name, AgentScheduleMessage_NavigationState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AgentScheduleMessage_NavigationState>(
    AgentScheduleMessage_NavigationState_descriptor(), name, value);
}
// ===================================================================

class AgentScheduleMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cti.common.AgentScheduleMessage) */ {
 public:
  AgentScheduleMessage();
  virtual ~AgentScheduleMessage();

  AgentScheduleMessage(const AgentScheduleMessage& from);

  inline AgentScheduleMessage& operator=(const AgentScheduleMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AgentScheduleMessage(AgentScheduleMessage&& from) noexcept
    : AgentScheduleMessage() {
    *this = ::std::move(from);
  }

  inline AgentScheduleMessage& operator=(AgentScheduleMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AgentScheduleMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AgentScheduleMessage* internal_default_instance() {
    return reinterpret_cast<const AgentScheduleMessage*>(
               &_AgentScheduleMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(AgentScheduleMessage* other);
  friend void swap(AgentScheduleMessage& a, AgentScheduleMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AgentScheduleMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  AgentScheduleMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AgentScheduleMessage& from);
  void MergeFrom(const AgentScheduleMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AgentScheduleMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef AgentScheduleMessage_AgentStatus AgentStatus;
  static const AgentStatus STOP =
    AgentScheduleMessage_AgentStatus_STOP;
  static const AgentStatus MOVE =
    AgentScheduleMessage_AgentStatus_MOVE;
  static inline bool AgentStatus_IsValid(int value) {
    return AgentScheduleMessage_AgentStatus_IsValid(value);
  }
  static const AgentStatus AgentStatus_MIN =
    AgentScheduleMessage_AgentStatus_AgentStatus_MIN;
  static const AgentStatus AgentStatus_MAX =
    AgentScheduleMessage_AgentStatus_AgentStatus_MAX;
  static const int AgentStatus_ARRAYSIZE =
    AgentScheduleMessage_AgentStatus_AgentStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  AgentStatus_descriptor() {
    return AgentScheduleMessage_AgentStatus_descriptor();
  }
  static inline const ::std::string& AgentStatus_Name(AgentStatus value) {
    return AgentScheduleMessage_AgentStatus_Name(value);
  }
  static inline bool AgentStatus_Parse(const ::std::string& name,
      AgentStatus* value) {
    return AgentScheduleMessage_AgentStatus_Parse(name, value);
  }

  typedef AgentScheduleMessage_NavigationState NavigationState;
  static const NavigationState STOPPED =
    AgentScheduleMessage_NavigationState_STOPPED;
  static const NavigationState MOVING =
    AgentScheduleMessage_NavigationState_MOVING;
  static const NavigationState LIFTING =
    AgentScheduleMessage_NavigationState_LIFTING;
  static const NavigationState DOCKING =
    AgentScheduleMessage_NavigationState_DOCKING;
  static const NavigationState UNSTOPABLE =
    AgentScheduleMessage_NavigationState_UNSTOPABLE;
  static const NavigationState WAITING =
    AgentScheduleMessage_NavigationState_WAITING;
  static const NavigationState PAUSE =
    AgentScheduleMessage_NavigationState_PAUSE;
  static const NavigationState OCCUPY_LIFT =
    AgentScheduleMessage_NavigationState_OCCUPY_LIFT;
  static const NavigationState ERROR =
    AgentScheduleMessage_NavigationState_ERROR;
  static const NavigationState DOCKING_BLOCKED =
    AgentScheduleMessage_NavigationState_DOCKING_BLOCKED;
  static const NavigationState CHARGING =
    AgentScheduleMessage_NavigationState_CHARGING;
  static inline bool NavigationState_IsValid(int value) {
    return AgentScheduleMessage_NavigationState_IsValid(value);
  }
  static const NavigationState NavigationState_MIN =
    AgentScheduleMessage_NavigationState_NavigationState_MIN;
  static const NavigationState NavigationState_MAX =
    AgentScheduleMessage_NavigationState_NavigationState_MAX;
  static const int NavigationState_ARRAYSIZE =
    AgentScheduleMessage_NavigationState_NavigationState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NavigationState_descriptor() {
    return AgentScheduleMessage_NavigationState_descriptor();
  }
  static inline const ::std::string& NavigationState_Name(NavigationState value) {
    return AgentScheduleMessage_NavigationState_Name(value);
  }
  static inline bool NavigationState_Parse(const ::std::string& name,
      NavigationState* value) {
    return AgentScheduleMessage_NavigationState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated sint32 agent_position = 2 [packed = true];
  int agent_position_size() const;
  void clear_agent_position();
  static const int kAgentPositionFieldNumber = 2;
  ::google::protobuf::int32 agent_position(int index) const;
  void set_agent_position(int index, ::google::protobuf::int32 value);
  void add_agent_position(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      agent_position() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_agent_position();

  // repeated sint32 current_floor = 4 [packed = true];
  int current_floor_size() const;
  void clear_current_floor();
  static const int kCurrentFloorFieldNumber = 4;
  ::google::protobuf::int32 current_floor(int index) const;
  void set_current_floor(int index, ::google::protobuf::int32 value);
  void add_current_floor(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      current_floor() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_current_floor();

  // repeated sint32 agent_path = 6 [packed = true];
  int agent_path_size() const;
  void clear_agent_path();
  static const int kAgentPathFieldNumber = 6;
  ::google::protobuf::int32 agent_path(int index) const;
  void set_agent_path(int index, ::google::protobuf::int32 value);
  void add_agent_path(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      agent_path() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_agent_path();

  // optional string elevator_id = 8;
  bool has_elevator_id() const;
  void clear_elevator_id();
  static const int kElevatorIdFieldNumber = 8;
  const ::std::string& elevator_id() const;
  void set_elevator_id(const ::std::string& value);
  #if LANG_CXX11
  void set_elevator_id(::std::string&& value);
  #endif
  void set_elevator_id(const char* value);
  void set_elevator_id(const char* value, size_t size);
  ::std::string* mutable_elevator_id();
  ::std::string* release_elevator_id();
  void set_allocated_elevator_id(::std::string* elevator_id);

  // optional string target_floor = 9;
  bool has_target_floor() const;
  void clear_target_floor();
  static const int kTargetFloorFieldNumber = 9;
  const ::std::string& target_floor() const;
  void set_target_floor(const ::std::string& value);
  #if LANG_CXX11
  void set_target_floor(::std::string&& value);
  #endif
  void set_target_floor(const char* value);
  void set_target_floor(const char* value, size_t size);
  ::std::string* mutable_target_floor();
  ::std::string* release_target_floor();
  void set_allocated_target_floor(::std::string* target_floor);

  // optional int32 agent_id = 1;
  bool has_agent_id() const;
  void clear_agent_id();
  static const int kAgentIdFieldNumber = 1;
  ::google::protobuf::int32 agent_id() const;
  void set_agent_id(::google::protobuf::int32 value);

  // optional .cti.common.AgentScheduleMessage.NavigationState agent_navigation_state = 5 [default = STOPPED];
  bool has_agent_navigation_state() const;
  void clear_agent_navigation_state();
  static const int kAgentNavigationStateFieldNumber = 5;
  ::cti::common::AgentScheduleMessage_NavigationState agent_navigation_state() const;
  void set_agent_navigation_state(::cti::common::AgentScheduleMessage_NavigationState value);

  // optional .cti.common.AgentScheduleMessage.AgentStatus agent_decision = 3 [default = MOVE];
  bool has_agent_decision() const;
  void clear_agent_decision();
  static const int kAgentDecisionFieldNumber = 3;
  ::cti::common::AgentScheduleMessage_AgentStatus agent_decision() const;
  void set_agent_decision(::cti::common::AgentScheduleMessage_AgentStatus value);

  // optional bool stop_moving = 7 [default = true];
  bool has_stop_moving() const;
  void clear_stop_moving();
  static const int kStopMovingFieldNumber = 7;
  bool stop_moving() const;
  void set_stop_moving(bool value);

  // @@protoc_insertion_point(class_scope:cti.common.AgentScheduleMessage)
 private:
  void set_has_agent_id();
  void clear_has_agent_id();
  void set_has_agent_decision();
  void clear_has_agent_decision();
  void set_has_agent_navigation_state();
  void clear_has_agent_navigation_state();
  void set_has_stop_moving();
  void clear_has_stop_moving();
  void set_has_elevator_id();
  void clear_has_elevator_id();
  void set_has_target_floor();
  void clear_has_target_floor();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > agent_position_;
  mutable int _agent_position_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > current_floor_;
  mutable int _current_floor_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > agent_path_;
  mutable int _agent_path_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr elevator_id_;
  ::google::protobuf::internal::ArenaStringPtr target_floor_;
  ::google::protobuf::int32 agent_id_;
  int agent_navigation_state_;
  int agent_decision_;
  bool stop_moving_;
  friend struct ::protobuf_schedule_5fmessage_2eproto::TableStruct;
  friend void ::protobuf_schedule_5fmessage_2eproto::InitDefaultsAgentScheduleMessageImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AgentScheduleMessage

// optional int32 agent_id = 1;
inline bool AgentScheduleMessage::has_agent_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AgentScheduleMessage::set_has_agent_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AgentScheduleMessage::clear_has_agent_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AgentScheduleMessage::clear_agent_id() {
  agent_id_ = 0;
  clear_has_agent_id();
}
inline ::google::protobuf::int32 AgentScheduleMessage::agent_id() const {
  // @@protoc_insertion_point(field_get:cti.common.AgentScheduleMessage.agent_id)
  return agent_id_;
}
inline void AgentScheduleMessage::set_agent_id(::google::protobuf::int32 value) {
  set_has_agent_id();
  agent_id_ = value;
  // @@protoc_insertion_point(field_set:cti.common.AgentScheduleMessage.agent_id)
}

// repeated sint32 agent_position = 2 [packed = true];
inline int AgentScheduleMessage::agent_position_size() const {
  return agent_position_.size();
}
inline void AgentScheduleMessage::clear_agent_position() {
  agent_position_.Clear();
}
inline ::google::protobuf::int32 AgentScheduleMessage::agent_position(int index) const {
  // @@protoc_insertion_point(field_get:cti.common.AgentScheduleMessage.agent_position)
  return agent_position_.Get(index);
}
inline void AgentScheduleMessage::set_agent_position(int index, ::google::protobuf::int32 value) {
  agent_position_.Set(index, value);
  // @@protoc_insertion_point(field_set:cti.common.AgentScheduleMessage.agent_position)
}
inline void AgentScheduleMessage::add_agent_position(::google::protobuf::int32 value) {
  agent_position_.Add(value);
  // @@protoc_insertion_point(field_add:cti.common.AgentScheduleMessage.agent_position)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AgentScheduleMessage::agent_position() const {
  // @@protoc_insertion_point(field_list:cti.common.AgentScheduleMessage.agent_position)
  return agent_position_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AgentScheduleMessage::mutable_agent_position() {
  // @@protoc_insertion_point(field_mutable_list:cti.common.AgentScheduleMessage.agent_position)
  return &agent_position_;
}

// optional .cti.common.AgentScheduleMessage.AgentStatus agent_decision = 3 [default = MOVE];
inline bool AgentScheduleMessage::has_agent_decision() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AgentScheduleMessage::set_has_agent_decision() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AgentScheduleMessage::clear_has_agent_decision() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AgentScheduleMessage::clear_agent_decision() {
  agent_decision_ = 1;
  clear_has_agent_decision();
}
inline ::cti::common::AgentScheduleMessage_AgentStatus AgentScheduleMessage::agent_decision() const {
  // @@protoc_insertion_point(field_get:cti.common.AgentScheduleMessage.agent_decision)
  return static_cast< ::cti::common::AgentScheduleMessage_AgentStatus >(agent_decision_);
}
inline void AgentScheduleMessage::set_agent_decision(::cti::common::AgentScheduleMessage_AgentStatus value) {
  assert(::cti::common::AgentScheduleMessage_AgentStatus_IsValid(value));
  set_has_agent_decision();
  agent_decision_ = value;
  // @@protoc_insertion_point(field_set:cti.common.AgentScheduleMessage.agent_decision)
}

// repeated sint32 current_floor = 4 [packed = true];
inline int AgentScheduleMessage::current_floor_size() const {
  return current_floor_.size();
}
inline void AgentScheduleMessage::clear_current_floor() {
  current_floor_.Clear();
}
inline ::google::protobuf::int32 AgentScheduleMessage::current_floor(int index) const {
  // @@protoc_insertion_point(field_get:cti.common.AgentScheduleMessage.current_floor)
  return current_floor_.Get(index);
}
inline void AgentScheduleMessage::set_current_floor(int index, ::google::protobuf::int32 value) {
  current_floor_.Set(index, value);
  // @@protoc_insertion_point(field_set:cti.common.AgentScheduleMessage.current_floor)
}
inline void AgentScheduleMessage::add_current_floor(::google::protobuf::int32 value) {
  current_floor_.Add(value);
  // @@protoc_insertion_point(field_add:cti.common.AgentScheduleMessage.current_floor)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AgentScheduleMessage::current_floor() const {
  // @@protoc_insertion_point(field_list:cti.common.AgentScheduleMessage.current_floor)
  return current_floor_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AgentScheduleMessage::mutable_current_floor() {
  // @@protoc_insertion_point(field_mutable_list:cti.common.AgentScheduleMessage.current_floor)
  return &current_floor_;
}

// optional .cti.common.AgentScheduleMessage.NavigationState agent_navigation_state = 5 [default = STOPPED];
inline bool AgentScheduleMessage::has_agent_navigation_state() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AgentScheduleMessage::set_has_agent_navigation_state() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AgentScheduleMessage::clear_has_agent_navigation_state() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AgentScheduleMessage::clear_agent_navigation_state() {
  agent_navigation_state_ = 0;
  clear_has_agent_navigation_state();
}
inline ::cti::common::AgentScheduleMessage_NavigationState AgentScheduleMessage::agent_navigation_state() const {
  // @@protoc_insertion_point(field_get:cti.common.AgentScheduleMessage.agent_navigation_state)
  return static_cast< ::cti::common::AgentScheduleMessage_NavigationState >(agent_navigation_state_);
}
inline void AgentScheduleMessage::set_agent_navigation_state(::cti::common::AgentScheduleMessage_NavigationState value) {
  assert(::cti::common::AgentScheduleMessage_NavigationState_IsValid(value));
  set_has_agent_navigation_state();
  agent_navigation_state_ = value;
  // @@protoc_insertion_point(field_set:cti.common.AgentScheduleMessage.agent_navigation_state)
}

// repeated sint32 agent_path = 6 [packed = true];
inline int AgentScheduleMessage::agent_path_size() const {
  return agent_path_.size();
}
inline void AgentScheduleMessage::clear_agent_path() {
  agent_path_.Clear();
}
inline ::google::protobuf::int32 AgentScheduleMessage::agent_path(int index) const {
  // @@protoc_insertion_point(field_get:cti.common.AgentScheduleMessage.agent_path)
  return agent_path_.Get(index);
}
inline void AgentScheduleMessage::set_agent_path(int index, ::google::protobuf::int32 value) {
  agent_path_.Set(index, value);
  // @@protoc_insertion_point(field_set:cti.common.AgentScheduleMessage.agent_path)
}
inline void AgentScheduleMessage::add_agent_path(::google::protobuf::int32 value) {
  agent_path_.Add(value);
  // @@protoc_insertion_point(field_add:cti.common.AgentScheduleMessage.agent_path)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AgentScheduleMessage::agent_path() const {
  // @@protoc_insertion_point(field_list:cti.common.AgentScheduleMessage.agent_path)
  return agent_path_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AgentScheduleMessage::mutable_agent_path() {
  // @@protoc_insertion_point(field_mutable_list:cti.common.AgentScheduleMessage.agent_path)
  return &agent_path_;
}

// optional bool stop_moving = 7 [default = true];
inline bool AgentScheduleMessage::has_stop_moving() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AgentScheduleMessage::set_has_stop_moving() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AgentScheduleMessage::clear_has_stop_moving() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AgentScheduleMessage::clear_stop_moving() {
  stop_moving_ = true;
  clear_has_stop_moving();
}
inline bool AgentScheduleMessage::stop_moving() const {
  // @@protoc_insertion_point(field_get:cti.common.AgentScheduleMessage.stop_moving)
  return stop_moving_;
}
inline void AgentScheduleMessage::set_stop_moving(bool value) {
  set_has_stop_moving();
  stop_moving_ = value;
  // @@protoc_insertion_point(field_set:cti.common.AgentScheduleMessage.stop_moving)
}

// optional string elevator_id = 8;
inline bool AgentScheduleMessage::has_elevator_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AgentScheduleMessage::set_has_elevator_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AgentScheduleMessage::clear_has_elevator_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AgentScheduleMessage::clear_elevator_id() {
  elevator_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_elevator_id();
}
inline const ::std::string& AgentScheduleMessage::elevator_id() const {
  // @@protoc_insertion_point(field_get:cti.common.AgentScheduleMessage.elevator_id)
  return elevator_id_.GetNoArena();
}
inline void AgentScheduleMessage::set_elevator_id(const ::std::string& value) {
  set_has_elevator_id();
  elevator_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cti.common.AgentScheduleMessage.elevator_id)
}
#if LANG_CXX11
inline void AgentScheduleMessage::set_elevator_id(::std::string&& value) {
  set_has_elevator_id();
  elevator_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cti.common.AgentScheduleMessage.elevator_id)
}
#endif
inline void AgentScheduleMessage::set_elevator_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_elevator_id();
  elevator_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cti.common.AgentScheduleMessage.elevator_id)
}
inline void AgentScheduleMessage::set_elevator_id(const char* value, size_t size) {
  set_has_elevator_id();
  elevator_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cti.common.AgentScheduleMessage.elevator_id)
}
inline ::std::string* AgentScheduleMessage::mutable_elevator_id() {
  set_has_elevator_id();
  // @@protoc_insertion_point(field_mutable:cti.common.AgentScheduleMessage.elevator_id)
  return elevator_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AgentScheduleMessage::release_elevator_id() {
  // @@protoc_insertion_point(field_release:cti.common.AgentScheduleMessage.elevator_id)
  clear_has_elevator_id();
  return elevator_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AgentScheduleMessage::set_allocated_elevator_id(::std::string* elevator_id) {
  if (elevator_id != NULL) {
    set_has_elevator_id();
  } else {
    clear_has_elevator_id();
  }
  elevator_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), elevator_id);
  // @@protoc_insertion_point(field_set_allocated:cti.common.AgentScheduleMessage.elevator_id)
}

// optional string target_floor = 9;
inline bool AgentScheduleMessage::has_target_floor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AgentScheduleMessage::set_has_target_floor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AgentScheduleMessage::clear_has_target_floor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AgentScheduleMessage::clear_target_floor() {
  target_floor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target_floor();
}
inline const ::std::string& AgentScheduleMessage::target_floor() const {
  // @@protoc_insertion_point(field_get:cti.common.AgentScheduleMessage.target_floor)
  return target_floor_.GetNoArena();
}
inline void AgentScheduleMessage::set_target_floor(const ::std::string& value) {
  set_has_target_floor();
  target_floor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cti.common.AgentScheduleMessage.target_floor)
}
#if LANG_CXX11
inline void AgentScheduleMessage::set_target_floor(::std::string&& value) {
  set_has_target_floor();
  target_floor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cti.common.AgentScheduleMessage.target_floor)
}
#endif
inline void AgentScheduleMessage::set_target_floor(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_target_floor();
  target_floor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cti.common.AgentScheduleMessage.target_floor)
}
inline void AgentScheduleMessage::set_target_floor(const char* value, size_t size) {
  set_has_target_floor();
  target_floor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cti.common.AgentScheduleMessage.target_floor)
}
inline ::std::string* AgentScheduleMessage::mutable_target_floor() {
  set_has_target_floor();
  // @@protoc_insertion_point(field_mutable:cti.common.AgentScheduleMessage.target_floor)
  return target_floor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AgentScheduleMessage::release_target_floor() {
  // @@protoc_insertion_point(field_release:cti.common.AgentScheduleMessage.target_floor)
  clear_has_target_floor();
  return target_floor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AgentScheduleMessage::set_allocated_target_floor(::std::string* target_floor) {
  if (target_floor != NULL) {
    set_has_target_floor();
  } else {
    clear_has_target_floor();
  }
  target_floor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_floor);
  // @@protoc_insertion_point(field_set_allocated:cti.common.AgentScheduleMessage.target_floor)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace cti

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::cti::common::AgentScheduleMessage_AgentStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cti::common::AgentScheduleMessage_AgentStatus>() {
  return ::cti::common::AgentScheduleMessage_AgentStatus_descriptor();
}
template <> struct is_proto_enum< ::cti::common::AgentScheduleMessage_NavigationState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cti::common::AgentScheduleMessage_NavigationState>() {
  return ::cti::common::AgentScheduleMessage_NavigationState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_schedule_5fmessage_2eproto__INCLUDED
